name: Build and Tag on Push to Main

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README*'
      - 'doc/**'
      - 'design/**'
      - 'dev/**'

permissions:
  contents: write

env:
  rack-sdk-version: latest
  rack-plugin-toolchain-dir: /home/build/rack-plugin-toolchain

defaults:
  run:
    shell: bash

jobs:
  build:
    name: Build on ${{ matrix.platform }}
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/qno/rack-plugin-toolchain-win-linux
      options: --user root
    strategy:
      matrix:
        platform: [win-x64, lin-x64]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          tags: true
          submodules: recursive

      - uses: actions/cache@v4
        id: plugin-version-cache
        with:
          path: plugin.json
          key: ${{ github.sha }}-${{ github.run_id }}

      - name: Build plugin
        run: |
          export PLUGIN_DIR=$GITHUB_WORKSPACE
          pushd ${{ env.rack-plugin-toolchain-dir }}
          make plugin-build-${{ matrix.platform }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.rack-plugin-toolchain-dir }}/plugin-build
          name: ${{ matrix.platform }}
          overwrite: true

  build-mac:
    name: Build on macOS ${{ matrix.platform }}
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        platform: [x64, arm64]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          tags: true
          submodules: recursive

      - name: Get Rack-SDK
        run: |
          pushd $HOME
          wget -O Rack-SDK.zip https://vcvrack.com/downloads/Rack-SDK-${{ env.rack-sdk-version }}-mac-x64%2barm64.zip
          unzip Rack-SDK.zip

      - name: Build plugin
        run: |
          CROSS_COMPILE_TARGET_x64=x86_64-apple-darwin
          CROSS_COMPILE_TARGET_arm64=arm64-apple-darwin
          export RACK_DIR=$HOME/Rack-SDK
          export CROSS_COMPILE=$CROSS_COMPILE_TARGET_${{ matrix.platform }}
          make dep
          make dist

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: dist/*.vcvplugin
          name: mac-${{ matrix.platform }}
          overwrite: true

  tag_version:
    name: Tag on Version Bump
    runs-on: ubuntu-latest
    needs: [build, build-mac]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          tags: true

      - name: Get Current Version
        id: get_version
        run: |
          VERSION=$(jq -r '.version' plugin.json)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Check for Existing Tag
        id: check_tag
        run: |
          if git rev-parse "v${{ steps.get_version.outputs.VERSION }}" >/dev/null 2>&1; then
            echo "Tag v${{ steps.get_version.outputs.VERSION }} already exists."
            echo "TAG_EXISTS=true" >> $GITHUB_OUTPUT
          else
            echo "Tag v${{ steps.get_version.outputs.VERSION }} does not exist."
            echo "TAG_EXISTS=false" >> $GITHUB_OUTPUT
          fi

      - name: Create and Push Tag
        if: steps.check_tag.outputs.TAG_EXISTS == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git tag -a "v${{ steps.get_version.outputs.VERSION }}" -m "Release version ${{ steps.get_version.outputs.VERSION }}"
          git remote set-url origin https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
          git push origin "v${{ steps.get_version.outputs.VERSION }}"

  publish-nightly:
    name: Publish Nightly
    runs-on: ubuntu-latest
    needs: [build, build-mac]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: _artifacts

      - name: Delete Old Release Assets
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: Nightly
          fail-if-no-assets: false
          assets: '*'

      - name: Upload Release Assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: _artifacts/**/*.vcvplugin
          tag: Nightly
          file_glob: true
